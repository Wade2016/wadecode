# Analysis of the DNA-Protein interface from data generated by nucplot and curves program
from natsort import natsorted, ns
#import mdtraj as md
import multiprocessing as mp
import pandas as pd
import numpy as np
import io, os, sys, time, tarfile
import zipfile
 
class InMemoryZip(object):
 
	def __init__(self):
		# Create the in-memory file-like object
		self.in_memory_zip = io.BytesIO()
 
	def appendFile(self, file_path, file_name=None):
		if file_name is None:
			p, fn = os.path.split(file_path)
		else:
			fn = file_name
 
		c = open(file_path, "rb").read()
		self.append(fn, c)
 
		return self
 
	def append(self, filename_in_zip, file_contents):
		"""Appends a file with name filename_in_zip and contents of
			file_contents to the in-memory zip."""
 
		# Get a handle to the in-memory zip in append mode
		zf = zipfile.ZipFile(self.in_memory_zip, "a", zipfile.ZIP_DEFLATED, False)
 
		# Write the file to the in-memory zip
		zf.writestr(filename_in_zip, file_contents)
 
		# Mark the files as having been created on Windows so that
		# Unix permissions are not inferred as 0000
		for zfile in zf.filelist:
			zfile.create_system = 0
		
		return self
 
 
	def read(self):
		"""Returns a string with the contents of the in-memory zip."""
		self.in_memory_zip.seek(0)
 		
		return self.in_memory_zip.read()
 
	def writetofile(self, filename):
		"""Writes the in-memory zip to a file."""
 
		f = open(filename, "wb")
		f.write(self.read())
		f.close()
 


def CURVES_CAL(frame_idx):
	print(frame_idx)
	cmd='cp ~/.bin/curves+/cur.inp1 cur_'+str(frame_idx)+'.inp; sed -i \"s/traj_0.pdb/frame_' + str(frame_idx) + '.pdb/g\" \"cur_' + str(frame_idx) +'.inp\" ; sed -i \"s/traj_out/curves_out_' + str(frame_idx) + '/g\" \"cur_' + str(frame_idx) +'.inp\" ; Cur+ < cur_' + str(frame_idx) + '.inp; '
	tarx='tar -uvf Curves.tar curves_out_' + str(frame_idx) + '.lis'
	os.system(cmd)
	cmd='rm  curves_out_'+str(frame_idx)+'_*.pdb curves_out_'+str(frame_idx)+'.cda cur_'+str(frame_idx)+'.inp'
	os.system(cmd)

def NUCPLOT_CAL(frame_idx):
	print(frame_idx)
	frame=traj[frame_idx]
	frame.save_pdb("frame_"+str(frame_idx)+".pdb")
	cmd= "~/software/nucplot_ias/nucplot.scr1 frame_"+str(frame_idx)+".pdb"
	tarx=" tar -uvf Bonds.tar frame_" + str(frame_idx) + ".bond "
	os.system(cmd)
	CURVES_CAL(frame_idx)
	os.system("rm frame_"+str(frame_idx)+".hb2 "+ "frame_"+str(frame_idx)+".nb2 " + "frame_"+str(frame_idx)+".pdb " + "frame_"+str(frame_idx)+".pdb.hbplus.rc " + "frame_"+str(frame_idx)+".pdb.hbadd.bonds")

def NUCPLOT_EXTRACT(file_idx):
	print(file_idx)
	iidx=0
	nucdata=pd.DataFrame(columns=["Frame", "P_resname", "P_chain", "P_resid", "P_atom", "PA_charge", "D_resname", "D_chain", "D_resid", "D_atom", "DA_charge", "Dist", "Type"])
	frame=int(file_idx.split('.')[0].split('_')[1])
	file_name=tarnucplot.extractfile(file_idx)
	Hbond=False
	Nbond=False
	for line in file_name.readlines():
		sline=line.decode('ASCII')
		if sline.find("HIS") >= 0:
			print("FOUND HIS IN:", file_idx)
			sline=sline.replace("HIS", "HIE")
			print(sline)
		slist=sline.split()
		slength=len(slist)
		if (Hbond == True)  and  (slength > 0) :
			if (slength == 9) and (slist[0] != 'ACE') and (slist[0]!= 'NME') and (slist[0] != 'Pt') and (slist[0]!='AME') and (slist[0]!='AMF') and (slist[4] != 'ACE') and (slist[4]!= 'NME') and (slist[4] != 'Pt') and (slist[4]!='AME') and (slist[4]!='AMF'):
				#print('HBOND:', sline)
				#extract Hbonds
				if slist[1] != "B":
					slist[0:4],slist[4:8]=slist[4:8],slist[0:4]
					#print(slist)
				nucdata.loc[str(frame)+"_"+str(iidx)]={"Frame": frame, "P_resname": slist[0], "P_chain": slist[1], "P_resid":slist[2], "P_atom":slist[3], 
					"PA_charge": atom_pars.loc[str(slist[0]+"_"+slist[3])]['Charge'], "D_resname":slist[4], "D_chain":slist[5], "D_resid":slist[6], "D_atom":slist[7], 
					"DA_charge": atom_pars.loc[str(slist[4]+"_"+slist[7])]['Charge'], "Dist":slist[8], "Type": "HB"}
				iidx=iidx+1
			if slist[0] == "protein" :
				#print("HBOND END, NBOND START")
				Nbond=True
				Hbond=False
		else:
			#print("finding:", slength)
			if slength > 0:
				if slist[0] == "Donor" :
					#print("found Hbond")
					Hbond=True
		if (Nbond == True) and (slength > 0) :
			if (slength == 9) and (slist[0] != 'ACE') and (slist[0]!= 'NME') and (slist[0] != 'Pt') and (slist[0]!='AME') and (slist[0]!='AMF') and (slist[4] != 'ACE') and (slist[4]!= 'NME') and (slist[4] != 'Pt') and (slist[4]!='AME') and (slist[4]!='AMF'):
				#extract NBOND
				#print('NBOND:', sline)
				bt="NB"
#				if float(atom_pars.loc[str(slist[0]+"_"+slist[3])]['Charge']) * float(atom_pars.loc[str(slist[4]+"_"+slist[7])]['Charge']) < -1.0e-1 :
					#print("CHARGE:",atom_pars.loc[str(slist[0]+"_"+slist[3])]['Charge'],atom_pars.loc[str(slist[4]+"_"+slist[7])]['Charge'] )
#					bt="IB"
				nucdata.loc[str(frame)+"_"+str(iidx)]={"Frame": frame, "P_resname": slist[0], "P_chain": slist[1], "P_resid":slist[2], "P_atom":slist[3], 
					"PA_charge": atom_pars.loc[str(slist[0]+"_"+slist[3])]['Charge'], "D_resname":slist[4], "D_chain":slist[5], "D_resid":slist[6], "D_atom":slist[7],
					"DA_charge": atom_pars.loc[str(slist[4]+"_"+slist[7])]['Charge'], "Dist":slist[8], "Type": bt}
				iidx=iidx+1

			if slist[0] == "****" :
				#print("NBOND END")
				Nbond=False
				break
	#write to InMemoryZip file
	#imz.append(str(frame)+"_tmpnuc.csv", nucdata.to_csv())
	nucdata.to_csv("."+file_idx+"_tmpnuc.csv")
	return frame

def CURVES_EXTRACT(file_idx):
    #print(file_idx)
    """
    startA=30
    endA=41
    startB=49
    endB=60
    startC=66
    endC=76
    startD1=84
    endD1=95
    startD2=99
    endD2=110
    startE=116
    endE=136

    curdataA=pd.DataFrame(index=range((endA-startA+1)*len(curlist)),
                      columns=['Level', 'Xdisp',   'Ydisp',   'Inclin',    'Tip', 'Ax-bend','Frame'])
    curdataA.loc[0]={'Level':'Nan','Xdisp': 'Nan', 'Ydisp':'Nan' ,'Inclin':'Nan','Tip':'Nan' ,'Ax-bend':'Nan' ,'Frame':'Nan'}


    curdataB=pd.DataFrame(index=range((endB-startB+1)*len(curlist)),
                      columns=['Level', 'Shear',  'Stretch', 'Stagger',  'Buckle',  'Propel', 'Opening', 'Frame'])
    curdataB.loc[0]={'Level':'Nan','Shear': 'Nan', 'Stretch':'Nan' ,'Stagger':'Nan','Buckle':'Nan' ,'Propel':'Nan' ,'Opening':'Nan', 'Frame':'Nan'}

    curdataC=pd.DataFrame(index=range((endC-startC+1)*len(curlist)),
                      columns=['Level', 'Shift',  'Slide', 'Rise',  'Tilt',  'Roll', 'Twist', 'H-Ris', 'H-Twi','Frame'])
    curdataC.loc[0]={'Level':'Nan','Shift': 'Nan', 'Slide':'Nan' ,'Rise':'Nan','Tilt':'Nan' ,'Roll':'Nan' ,'Twist':'Nan',
                'H-Ris':'Nan', 'H-Twi':'Nan', 'Frame':'Nan'}


    curdataD1=pd.DataFrame(index=range((endD1-startD1+1)*len(curlist)),
                      columns=['Level','Alpha1','Beta1','Gamma1','Delta1','Epsil1','Zeta1','Chi1','Phase1','Ampli1', 'Frame'])
    curdataD1.loc[0]={'Level':'Nan','Alpha1': 'Nan', 'Beta1':'Nan' ,'Gamma1':'Nan','Delta1':'Nan' ,'Epsil1':'Nan' ,'Zeta1':'Nan',
                  'Chi1':'Nan','Phase1':'Nan','Ampli1':'Nan','Frame':'Nan'}

    curdataD2=pd.DataFrame(index=range((endD2-startD2+1)*len(curlist)),
                   columns=['Level','Alpha2','Beta2','Gamma2','Delta2','Epsil2','Zeta2','Chi2','Phase2','Ampli2', 'Frame'])
    curdataD2.loc[0]={'Level':'Nan','Alpha2': 'Nan', 'Beta2':'Nan' ,'Gamma2':'Nan','Delta2':'Nan','Epsil2':'Nan','Zeta2':'Nan',
                  'Chi2':'Nan','Phase2':'Nan','Ampli2':'Nan','Frame':'Nan'}

    curdataE=pd.DataFrame(index=range((endE-startE+1)*len(curlist)),
                      columns=['Level', 'W12',   'D12',   'W21',    'D21', 'Frame'])
    curdataE.loc[0]={'Level':'Nan','W12': 'Nan', 'D12':'Nan','W21':'Nan','D21':'Nan','Frame':'Nan'}
    """

    frame=int(file_idx.split('.')[0].split('_')[2])
    file_name=tarcurves.extractfile(file_idx)
    #print(file_name)
    i=0
    for line in file_name.readlines():
        #print(i, line.decode('ASCII'))
        
        # extract section A
        if i>=startA and i<=endA :
            sline=line.decode('ASCII')
            curdataA.loc[frame*(endA-startA+1)+i-startA] = {'Level':i-startA+1,'Xdisp': sline.split()[4], 
                                                            'Ydisp':sline.split()[5] ,'Inclin':sline.split()[6],
                                                            'Tip':sline.split()[7] ,'Ax-bend':sline.split()[8] ,
                                                            'Frame':frame}
        # extract section B
        if i>=startB and i<=endB :
            sline=line.decode('ASCII')
            curdataB.loc[frame*(endB-startB+1)+i-startB] = {'Level':i-startB+1,'Shear': sline.split()[4], 
                                                            'Stretch':sline.split()[5] ,'Stagger':sline.split()[6],
                                                            'Buckle':sline.split()[7] ,'Propel':sline.split()[8] ,
                                                            'Opening':sline.split()[9] ,'Frame':frame}
        
        # extract section C
        if i>=startC and i<=endC :
            sline=line.decode('ASCII')
            curdataC.loc[frame*(endC-startC+1)+i-startC] = {'Level':i-startC+1,'Shift': sline.split()[4], 
                                                            'Slide':sline.split()[5] ,'Rise':sline.split()[6],
                                                            'Tilt':sline.split()[7] ,'Roll':sline.split()[8],
                                                            'Twist':sline.split()[9] ,'H-Ris':sline.split()[10],
                                                            'H-Twi':sline.split()[11],'Frame':frame}

        # extract section D1
        if i>=startD1 and i<=endD1 :
            sline=line.decode('ASCII')
            curdataD1.loc[frame*(endD1-startD1+1)+i-startD1] = {'Level':i-startD1+1,'Alpha1': sline.split()[3], 
                                                            'Beta1':sline.split()[4] ,'Gamma1':sline.split()[5],
                                                            'Delta1':sline.split()[6] ,'Epsil1':sline.split()[7],
                                                            'Zeta1':sline.split()[8] ,'Chi1':sline.split()[9],
                                                            'Phase1':sline.split()[10],'Ampli1':sline.split()[11],
                                                            'Frame':frame}
        # extract section D2
        if i>=startD2 and i<=endD2 :
            sline=line.decode('ASCII')
            curdataD2.loc[frame*(endD2-startD2+1)+i-startD2] = {'Level':i-startD2+1,'Alpha2': sline.split()[3], 
                                                            'Beta2':sline.split()[4] ,'Gamma2':sline.split()[5],
                                                            'Delta2':sline.split()[6] ,'Epsil2':sline.split()[7],
                                                            'Zeta2':sline.split()[8] ,'Chi2':sline.split()[9],
                                                            'Phase2':sline.split()[10],'Ampli2':sline.split()[11],
                                                            'Frame':frame}

        # extract section E
        if i>=startE and i<=endE :
            sline=line.decode('ASCII')
            tmp=['Nan','Nan','Nan','Nan']
            if ((i-startE) % 2)== 0:
                if len(sline.split()) > 1:
                    for xx in range(len(sline.split())-1):
                        tmp[xx] = sline.split()[xx+1]
            else:
                if len(sline.split()) > 3:
                    for xx in range(len(sline.split())-3):
                        tmp[xx] = sline.split()[xx+3]
                               
            curdataE.loc[frame*(endE-startE+1)+i-startE] = {'Level':sline.split()[0],'W12': tmp[0], 
                                                            'D12':tmp[1] ,'W21':tmp[2],
                                                            'D21':tmp[3] ,'Frame':frame}            

        i=i+1
    """
    curdataA2D=curdataA
    for xx in ['Shear' , 'Stretch', 'Stagger',  'Buckle',  'Propel', 'Opening']:
        curdataA2D[xx]=curdataB[xx]
    for xx in ['Shift',  'Slide', 'Rise',  'Tilt',  'Roll', 'Twist', 'H-Ris', 'H-Twi']:
        curdataA2D[xx]=curdataC[xx]
    for xx in ['Alpha1','Beta1','Gamma1','Delta1','Epsil1','Zeta1','Chi1','Phase1','Ampli1']:
        curdataA2D[xx]=curdataD1[xx]     
    for xx in ['Alpha2','Beta2','Gamma2','Delta2','Epsil2','Zeta2','Chi2','Phase2','Ampli2']:
        curdataA2D[xx]=curdataD2[xx]     

    curdataA2D.to_csv(file_idx+".a2d")
    curdataE.to_csv(file_idx+".e")
    """
    return 0
    
def ATOM_PAR(topfile):
	para=pd.DataFrame(columns=["Charge", "Mass"])
	CHOSE=False
	IDX=0
	i=0
	with open(topfile) as lines:
		for line in lines:
			sline=line.split()
			slength=len(sline)
			if slength > 1:
				#print(i, sline)
				if (IDX < 2) and (sline[1] == "moleculetype") :
					CHOSE=True
					IDX=IDX+1
					#print("FIND SECTION")
				else:
					if (slength == 11) and (CHOSE == True) and (sline[3] != 'NME') and (sline[3] != 'ACE') and (sline[3] != 'Pt' and (sline[3] != 'AME') and (sline[3] != 'AMF')):
						para.loc[str(sline[3]+"_"+sline[4])]={"Charge": sline[6], "Mass":sline[7]}
						i=i+1
						#print("READ SECTION")
					if sline[1] == "bonds":
						CHOSE=False
						#print("READ END")
	
	return para
			
	
	


if __name__=='__main__':
	print("Help: script curves.tar.gz nucplot.tar.gz, topfile")
	print(sys.argv)
	file1=sys.argv[1]
	file2=sys.argv[2]
	file3=sys.argv[3]

	Tstart=time.time()

	atom_pars=ATOM_PAR(file3)
	print("NUMBER OF ATOM TYPES:", len(atom_pars.index))
	#print(atom_pars)
	
	#open and load whole file in memory
	curves_byte = open(file1, "rb")
	nucplot_byte = open(file2, "rb")
	file1_like_object=io.BytesIO(curves_byte.read())
	file2_like_object=io.BytesIO(nucplot_byte.read())
	curves_byte.close()
	nucplot_byte.close()

	#load files from memory to tarfile object
	tarcurves=tarfile.open(fileobj=file1_like_object)
	tarnucplot=tarfile.open(fileobj=file2_like_object)



	curlist=[]
	for member in list(tarcurves.getmembers()):
		curlist.append(member.name)
	curlist=natsorted(curlist)
	print(len(curlist))
	
	nuclist=[]
	for member in list(tarnucplot.getmembers()):
		nuclist.append(member.name)
	nuclist=natsorted(nuclist)
	print(len(nuclist))

	"""	
	##check 6682.bond
	print("CHECK")
	print(nuclist[10011])
	indi=open('10011.txt', "w")
	file_name=tarnucplot.extractfile(nuclist[10011])
	for line in file_name.readlines():
		sline=line.decode('ASCII')
		indi.write(sline)
	indi.close()
	"""

	startA=30
	endA=41
	startB=49
	endB=60
	startC=66
	endC=76
	startD1=84
	endD1=95
	startD2=99
	endD2=110
	startE=116
	endE=136

	curdataA=pd.DataFrame(index=range((endA-startA+1)*len(curlist)), 
                      columns=['Level', 'Xdisp',   'Ydisp',   'Inclin',    'Tip', 'Ax-bend','Frame'])
	curdataA.loc[0]={'Level':'Nan','Xdisp': 'Nan', 'Ydisp':'Nan' ,'Inclin':'Nan','Tip':'Nan' ,'Ax-bend':'Nan' ,'Frame':'Nan'}


	curdataB=pd.DataFrame(index=range((endB-startB+1)*len(curlist)), 
                      columns=['Level', 'Shear',  'Stretch', 'Stagger',  'Buckle',  'Propel', 'Opening', 'Frame'])
	curdataB.loc[0]={'Level':'Nan','Shear': 'Nan', 'Stretch':'Nan' ,'Stagger':'Nan','Buckle':'Nan' ,'Propel':'Nan' ,'Opening':'Nan', 'Frame':'Nan'}

	curdataC=pd.DataFrame(index=range((endC-startC+1)*len(curlist)), 
                      columns=['Level', 'Shift',  'Slide', 'Rise',  'Tilt',  'Roll', 'Twist', 'H-Ris', 'H-Twi','Frame'])
	curdataC.loc[0]={'Level':'Nan','Shift': 'Nan', 'Slide':'Nan' ,'Rise':'Nan','Tilt':'Nan' ,'Roll':'Nan' ,'Twist':'Nan',
                'H-Ris':'Nan', 'H-Twi':'Nan', 'Frame':'Nan'}


	curdataD1=pd.DataFrame(index=range((endD1-startD1+1)*len(curlist)), 
                      columns=['Level','Alpha1','Beta1','Gamma1','Delta1','Epsil1','Zeta1','Chi1','Phase1','Ampli1', 'Frame'])
	curdataD1.loc[0]={'Level':'Nan','Alpha1': 'Nan', 'Beta1':'Nan' ,'Gamma1':'Nan','Delta1':'Nan' ,'Epsil1':'Nan' ,'Zeta1':'Nan',
                  'Chi1':'Nan','Phase1':'Nan','Ampli1':'Nan','Frame':'Nan'}

	curdataD2=pd.DataFrame(index=range((endD2-startD2+1)*len(curlist)), 
                      columns=['Level','Alpha2','Beta2','Gamma2','Delta2','Epsil2','Zeta2','Chi2','Phase2','Ampli2', 'Frame'])
	curdataD2.loc[0]={'Level':'Nan','Alpha2': 'Nan', 'Beta2':'Nan' ,'Gamma2':'Nan','Delta2':'Nan','Epsil2':'Nan','Zeta2':'Nan',
                  'Chi2':'Nan','Phase2':'Nan','Ampli2':'Nan','Frame':'Nan'}

	curdataE=pd.DataFrame(index=range((endE-startE+1)*len(curlist)), 
                      columns=['Level', 'W12',   'D12',   'W21',    'D21', 'Frame'])
	curdataE.loc[0]={'Level':'Nan','W12': 'Nan', 'D12':'Nan','W21':'Nan','D21':'Nan','Frame':'Nan'}

	nucdata=pd.DataFrame(columns=["Frame", "P_resname", "P_chain", "P_resid", "P_atom", "PA_charge", "D_resname", "D_chain", "D_resid", "D_atom", "DA_charge", "Dist", "Type"])


	##############################################

	"""
	print("RUNNING CURVES DATA")
	for f in curlist[0:1000]:
	    print(f)
	    CURVES_EXTRACT(f)

	testlist=curlist[0:100]
	#threading on
	pool = mp.Pool(processes = mp.cpu_count()-1)
	pool.map(CURVES_EXTRACT, testlist)
	pool.close()
	pool.join()
	#threading off 

	curdataA2D=pd.DataFrame()
	for x in testlist:
		print("merge:",x)
		dft1=pd.DataFrame.from_csv(x+".a2d")
		dft2=pd.DataFrame.from_csv(x+".e")
		curdataA2D=pd.concat([curdataA2D, dft1])
		curdataE=pd.concat([curdataE, dft2])
		os.remove(x+".a2d")
		os.remove(x+".e")
		print(nucdata.shape)


	curdataA2D=curdataA
	for xx in ['Shear' , 'Stretch', 'Stagger',  'Buckle',  'Propel', 'Opening']:
		curdataA2D[xx]=curdataB[xx]
	for xx in ['Shift',  'Slide', 'Rise',  'Tilt',  'Roll', 'Twist', 'H-Ris', 'H-Twi']:
		curdataA2D[xx]=curdataC[xx]
	for xx in ['Alpha1','Beta1','Gamma1','Delta1','Epsil1','Zeta1','Chi1','Phase1','Ampli1']:
		curdataA2D[xx]=curdataD1[xx]     
	for xx in ['Alpha2','Beta2','Gamma2','Delta2','Epsil2','Zeta2','Chi2','Phase2','Ampli2']:
		curdataA2D[xx]=curdataD2[xx]     


	curdataA2D.to_csv("Curves_dataA2D.csv")
	curdataE.to_csv("Curves_dataE.csv")

	##############################################
	"""

	##############################################
	print("RUNNING NUCPLOT DATA")
	
	testlist=nuclist
	#threading on
	pool = mp.Pool(processes = mp.cpu_count()-1)
	pool.map(NUCPLOT_EXTRACT, testlist)
	pool.close()
	pool.join()
	#threading off 
	
	print("Merge data")
	nucdata.to_csv("Nucplot_all.csv")
	for x in testlist:
		print("merge:",x)
		fname="."+ x + "_tmpnuc.csv"
		os.system("awk '{if(NR>1) print $0}' "+ fname + " >> Nucplot_all.csv")
		os.remove(fname)
	nucdata=pd.DataFrame.from_csv("Nucplot_all.csv")
	#nucdata=nucdata.drop_duplicates()
	#nucdata=nucdata.dropna()
	print(nucdata.shape)
	
	

	#nucdata.to_csv("Nucplot_data.csv")
	###############################################

	#Close memory files
	tarnucplot.close()
	tarcurves.close()
	Tend=time.time()
	print("Total Time:", Tend - Tstart)

